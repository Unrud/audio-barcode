//! Operations over Galois Fields, using pre-calculated tables for 0x11d primitive polynomial
pub mod poly;
pub mod poly_math;

/// Primitive operations over Galua Fields

#[allow(non_camel_case_types)]
pub trait GF2_X {
    #[inline]
    fn get_field_charac() -> usize;
    #[inline]
    fn get_exp_size() -> usize;
    #[inline]
    fn get_exp(i: usize) -> u8;
    #[inline]
    fn get_log_size() -> usize;
    #[inline]
    fn get_log(i: usize) -> u8;

    #[inline]
    fn add(x: u8, y: u8) -> u8 {
        x ^ y
    }

    #[inline]
    fn sub(x: u8, y: u8) -> u8 {
        x ^ y
    }

    #[inline]
    fn mul(x: u8, y: u8) -> u8 {
        if x == 0 || y == 0 {
            0
        } else {
            let log_x = Self::get_log(x as usize);
            let log_y = Self::get_log(y as usize);
            let exp_index = log_x as usize + 
                            log_y as usize;

            Self::get_exp(exp_index)
        }
    }

    #[inline]
    fn div(x: u8, y: u8) -> u8 {
        debug_assert!(y != 0);
        if x == 0 {
            0
        } else {
            let log_x = Self::get_log(x as usize) as usize;
            let log_y = Self::get_log(y as usize) as usize;
            let exp_index = (log_x + Self::get_field_charac() - log_y) % Self::get_field_charac();

            Self::get_exp(exp_index)
        }
    }

    #[inline]
    fn pow(x: u8, power: i32) -> u8 {
        let mut i = Self::get_log(x as usize) as i32
        * power
        % Self::get_field_charac() as i32;

        if i < 0 {
            i += Self::get_field_charac() as i32;
        }

        Self::get_exp(i as usize)
    }

    #[inline]
    fn inverse(x: u8) -> u8 {
        let exp_index = Self::get_field_charac() as u8 - Self::get_log(x as usize);
        Self::get_exp(exp_index as usize)
    }
}

/// GF(2^3)
#[derive(Debug)]
pub struct GF2_3();

impl GF2_3 {
    const FIELD_CHARAC: usize = 7;  //2usize.pow(3) - 1;

    const EXP_SIZE: usize = (Self::FIELD_CHARAC + 1) * 2;
    const EXP: [u8; Self::EXP_SIZE] = [
        1, 2, 4, 3, 6, 7, 5, 1, 2, 4, 3, 6, 7, 5, 1, 2
    ];

    const LOG_SIZE: usize = Self::FIELD_CHARAC + 1; 
    const LOG: [u8; Self::LOG_SIZE] = [
        0, 0, 1, 3, 2, 6, 4, 5
    ];
}

impl GF2_X for GF2_3 {
    #[inline]
    fn get_field_charac() -> usize { Self::FIELD_CHARAC }
    #[inline]
    fn get_exp_size() -> usize { Self::EXP_SIZE }
    #[inline]
    fn get_exp(i: usize) -> u8 { uncheck!(Self::EXP[i]) }
    #[inline]
    fn get_log_size() -> usize { Self::LOG_SIZE }
    #[inline]
    fn get_log(i: usize) -> u8 { uncheck!(Self::LOG[i]) }
}

/// GF(2^4)
#[derive(Debug)]
pub struct GF2_4();

impl GF2_4 {
    const FIELD_CHARAC: usize = 15;  //2usize.pow(4) - 1;

    const EXP_SIZE: usize = (Self::FIELD_CHARAC + 1) * 2;
    const EXP: [u8; Self::EXP_SIZE] = [
        1, 2, 4, 8, 3, 6, 12, 11, 5, 10, 7, 14, 15, 13, 9, 1, 2, 4, 8, 3, 6, 12, 11, 5, 10, 7, 14,
        15, 13, 9, 1, 2
    ];

    const LOG_SIZE: usize = Self::FIELD_CHARAC + 1; 
    const LOG: [u8; Self::LOG_SIZE] = [
        0, 0, 1, 4, 2, 8, 5, 10, 3, 14, 9, 7, 6, 13, 11, 12
    ];
}

impl GF2_X for GF2_4 {
    #[inline]
    fn get_field_charac() -> usize { Self::FIELD_CHARAC }
    #[inline]
    fn get_exp_size() -> usize { Self::EXP_SIZE }
    #[inline]
    fn get_exp(i: usize) -> u8 { uncheck!(Self::EXP[i]) }
    #[inline]
    fn get_log_size() -> usize { Self::LOG_SIZE }
    #[inline]
    fn get_log(i: usize) -> u8 { uncheck!(Self::LOG[i]) }
}

/// GF(2^5)
#[derive(Debug)]
pub struct GF2_5();

impl GF2_5 {
    const FIELD_CHARAC: usize = 31;  //2usize.pow(5) - 1;

    const EXP_SIZE: usize = (Self::FIELD_CHARAC + 1) * 2;
    const EXP: [u8; Self::EXP_SIZE] = [
        1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30,
        25, 23, 11, 22, 9, 18, 1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3,
        6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1, 2
    ];

    const LOG_SIZE: usize = Self::FIELD_CHARAC + 1; 
    const LOG: [u8; Self::LOG_SIZE] = [
        0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25,
        9, 16, 13, 14, 24, 15
    ];
}

impl GF2_X for GF2_5 {
    #[inline]
    fn get_field_charac() -> usize { Self::FIELD_CHARAC }
    #[inline]
    fn get_exp_size() -> usize { Self::EXP_SIZE }
    #[inline]
    fn get_exp(i: usize) -> u8 { uncheck!(Self::EXP[i]) }
    #[inline]
    fn get_log_size() -> usize { Self::LOG_SIZE }
    #[inline]
    fn get_log(i: usize) -> u8 { uncheck!(Self::LOG[i]) }
}

/// GF(2^6)
#[derive(Debug)]
pub struct GF2_6();

impl GF2_6 {
    const FIELD_CHARAC: usize = 63;  //2usize.pow(6) - 1;

    const EXP_SIZE: usize = (Self::FIELD_CHARAC + 1) * 2;
    const EXP: [u8; Self::EXP_SIZE] = [
        1, 2, 4, 8, 16, 32, 3, 6, 12, 24, 48, 35, 5, 10, 20, 40, 19, 38, 15, 30, 60, 59, 53, 41, 17, 34,
        7, 14, 28, 56, 51, 37, 9, 18, 36, 11, 22, 44, 27, 54, 47, 29, 58, 55, 45, 25, 50, 39, 13, 26, 52,
        43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 1, 2, 4, 8, 16, 32, 3, 6, 12, 24, 48, 35, 5, 10,
        20, 40, 19, 38, 15, 30, 60, 59, 53, 41, 17, 34, 7, 14, 28, 56, 51, 37, 9, 18, 36, 11, 22, 44, 27,
        54, 47, 29, 58, 55, 45, 25, 50, 39, 13, 26, 52, 43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 1, 2
    ];

    const LOG_SIZE: usize = Self::FIELD_CHARAC + 1; 
    const LOG: [u8; Self::LOG_SIZE] = [
        0, 0, 1, 6, 2, 12, 7, 26, 3, 32, 13, 35, 8, 48, 27, 18, 4, 24, 33, 16, 14, 52, 36, 54, 9, 45, 49,
        38, 28, 41, 19, 56, 5, 62, 25, 11, 34, 31, 17, 47, 15, 23, 53, 51, 37, 44, 55, 40, 10, 61, 46, 30,
        50, 22, 39, 43, 29, 60, 42, 21, 20, 59, 57, 58
    ];
}

impl GF2_X for GF2_6 {
    #[inline]
    fn get_field_charac() -> usize { Self::FIELD_CHARAC }
    #[inline]
    fn get_exp_size() -> usize { Self::EXP_SIZE }
    #[inline]
    fn get_exp(i: usize) -> u8 { uncheck!(Self::EXP[i]) }
    #[inline]
    fn get_log_size() -> usize { Self::LOG_SIZE }
    #[inline]
    fn get_log(i: usize) -> u8 { uncheck!(Self::LOG[i]) }
}

/// GF(2^7)
#[derive(Debug)]
pub struct GF2_7();

impl GF2_7 {
    const FIELD_CHARAC: usize = 127;  //2usize.pow(7) - 1;

    const EXP_SIZE: usize = (Self::FIELD_CHARAC + 1) * 2;
    const EXP: [u8; Self::EXP_SIZE] = [
        1, 2, 4, 8, 16, 32, 64, 3, 6, 12, 24, 48, 96, 67, 5, 10, 20, 40, 80, 35, 70, 15, 30, 60, 120, 115,
        101, 73, 17, 34, 68, 11, 22, 44, 88, 51, 102, 79, 29, 58, 116, 107, 85, 41, 82, 39, 78, 31, 62,
        124, 123, 117, 105, 81, 33, 66, 7, 14, 28, 56, 112, 99, 69, 9, 18, 36, 72, 19, 38, 76, 27, 54, 108,
        91, 53, 106, 87, 45, 90, 55, 110, 95, 61, 122, 119, 109, 89, 49, 98, 71, 13, 26, 52, 104, 83, 37,
        74, 23, 46, 92, 59, 118, 111, 93, 57, 114, 103, 77, 25, 50, 100, 75, 21, 42, 84, 43, 86, 47, 94,
        63, 126, 127, 125, 121, 113, 97, 65, 1, 2, 4, 8, 16, 32, 64, 3, 6, 12, 24, 48, 96, 67, 5, 10, 20,
        40, 80, 35, 70, 15, 30, 60, 120, 115, 101, 73, 17, 34, 68, 11, 22, 44, 88, 51, 102, 79, 29, 58, 116,
        107, 85, 41, 82, 39, 78, 31, 62, 124, 123, 117, 105, 81, 33, 66, 7, 14, 28, 56, 112, 99, 69, 9, 18,
        36, 72, 19, 38, 76, 27, 54, 108, 91, 53, 106, 87, 45, 90, 55, 110, 95, 61, 122, 119, 109, 89, 49, 98,
        71, 13, 26, 52, 104, 83, 37, 74, 23, 46, 92, 59, 118, 111, 93, 57, 114, 103, 77, 25, 50, 100, 75, 21,
        42, 84, 43, 86, 47, 94, 63, 126, 127, 125, 121, 113, 97, 65, 1, 2
    ];

    const LOG_SIZE: usize = Self::FIELD_CHARAC + 1; 
    const LOG: [u8; Self::LOG_SIZE] = [
        0, 0, 1, 7, 2, 14, 8, 56, 3, 63, 15, 31, 9, 90, 57, 21, 4, 28, 64, 67, 16, 112, 32, 97, 10, 108,
        91, 70, 58, 38, 22, 47, 5, 54, 29, 19, 65, 95, 68, 45, 17, 43, 113, 115, 33, 77, 98, 117, 11, 87,
        109, 35, 92, 74, 71, 79, 59, 104, 39, 100, 23, 82, 48, 119, 6, 126, 55, 13, 30, 62, 20, 89, 66,
        27, 96, 111, 69, 107, 46, 37, 18, 53, 44, 94, 114, 42, 116, 76, 34, 86, 78, 73, 99, 103, 118, 81,
        12, 125, 88, 61, 110, 26, 36, 106, 93, 52, 75, 41, 72, 85, 80, 102, 60, 124, 105, 25, 40, 51, 101,
        84, 24, 123, 83, 50, 49, 122, 120, 121
    ];
}

impl GF2_X for GF2_7 {
    #[inline]
    fn get_field_charac() -> usize { Self::FIELD_CHARAC }
    #[inline]
    fn get_exp_size() -> usize { Self::EXP_SIZE }
    #[inline]
    fn get_exp(i: usize) -> u8 { uncheck!(Self::EXP[i]) }
    #[inline]
    fn get_log_size() -> usize { Self::LOG_SIZE }
    #[inline]
    fn get_log(i: usize) -> u8 { uncheck!(Self::LOG[i]) }
}

/// GF(2^8)
#[derive(Debug)]
pub struct GF2_8();

impl GF2_8 {
    const FIELD_CHARAC: usize = 255;  //2usize.pow(8) - 1;

    const EXP_SIZE: usize = (Self::FIELD_CHARAC + 1) * 2;
    const EXP: [u8; Self::EXP_SIZE] = [
        1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117,
        234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181,
        119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222,
        161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211,
        187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34,
        68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118,
        236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21,
        42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209,
        191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150,
        49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56,
        112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69,
        138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176,
        125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1, 2, 4, 8, 16, 32, 64, 128, 29, 58,
        116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96,
        192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10,
        20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188,
        101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223,
        163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103,
        206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46,
        92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170,
        73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215,
        179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87,
        174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89,
        178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244,
        245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108,
        216, 173, 71, 142, 1, 2
    ];

    const LOG_SIZE: usize = Self::FIELD_CHARAC + 1; 
    const LOG: [u8; Self::LOG_SIZE] = [
        0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239,
        129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218,
        240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6,
        191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143,
        150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58,
        40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167,
        87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119,
        38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144,
        135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109,
        65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59,
        82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81,
        11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234,
        168, 80, 88, 175
    ];
}

impl GF2_X for GF2_8 {
    #[inline]
    fn get_field_charac() -> usize { Self::FIELD_CHARAC }
    #[inline]
    fn get_exp_size() -> usize { Self::EXP_SIZE }
    #[inline]
    fn get_exp(i: usize) -> u8 { uncheck!(Self::EXP[i]) }
    #[inline]
    fn get_log_size() -> usize { Self::LOG_SIZE }
    #[inline]
    fn get_log(i: usize) -> u8 { uncheck!(Self::LOG[i]) }
}

#[cfg(test)]
mod tests {
    use super::GF2_8;
    use super::GF2_X;
    
    #[test]
    fn add() {
        let answers: [u8; GF2_8::LOG_SIZE] = [
            1, 2, 5, 17, 18, 18, 90, 70, 30, 229, 71, 6, 214, 239, 212, 109, 
            72, 252, 205, 84, 128, 248, 5, 72, 147, 194, 111, 244, 208, 56, 44, 177, 
            152, 173, 43, 179, 196, 110, 155, 20, 95, 71, 59, 173, 30, 211, 29, 102, 
            91, 57, 199, 119, 126, 15, 169, 25, 148, 32, 96, 170, 244, 139, 172, 7, 
            89, 1, 234, 160, 255, 242, 110, 65, 135, 82, 172, 188, 14, 173, 90, 120, 
            203, 55, 71, 117, 228, 64, 106, 194, 15, 51, 204, 255, 216, 142, 55, 162, 
            199, 237, 245, 37, 210, 106, 58, 230, 102, 32, 28, 60, 42, 56, 221, 243, 
            75, 65, 165, 227, 242, 248, 190, 184, 117, 162, 9, 105, 228, 192, 193, 155, 
            130, 103, 238, 171, 52, 237, 185, 164, 40, 212, 255, 175, 181, 208, 212, 76, 
            75, 232, 3, 94, 116, 28, 225, 214, 88, 214, 171, 171, 199, 245, 62, 93, 
            209, 238, 110, 56, 83, 45, 240, 179, 108, 98, 64, 1, 167, 10, 79, 158, 
            17, 141, 120, 224, 130, 27, 63, 90, 17, 11, 87, 143, 226, 58, 239, 227, 
            157, 52, 113, 188, 127, 246, 163, 120, 216, 47, 57, 12, 162, 171, 60, 80, 
            61, 3, 98, 224, 80, 111, 172, 69, 56, 251, 173, 231, 23, 137, 180, 83, 
            217, 125, 23, 32, 161, 211, 84, 164, 252, 6, 237, 0, 177, 254, 39, 193, 
            99, 246, 101, 148, 28, 14, 98, 107, 111, 224, 152, 50, 5, 23, 214, 174
        ]; 

        for i in 0..GF2_8::LOG_SIZE {
            assert_eq!(GF2_8::add(GF2_8::LOG[i], GF2_8::EXP[i]), answers[i]);
        }
    }

    #[test]
    fn sub() {
        add();
    }

    #[test]
    fn mul() {
        let answers: [u8; GF2_8::LOG_SIZE] = [
            0, 0, 4, 200, 32, 14, 206, 179, 39, 134, 169, 160, 32, 59, 184, 50, 
            45, 121, 69, 43, 102, 43, 139, 169, 18, 94, 107, 84, 18, 157, 159, 51, 
            211, 1, 52, 13, 51, 128, 31, 219, 240, 230, 212, 219, 197, 19, 11, 135, 
            93, 163, 237, 53, 91, 177, 135, 124, 240, 224, 6, 158, 167, 155, 155, 38, 
            223, 144, 70, 54, 50, 45, 134, 170, 126, 223, 103, 207, 253, 176, 75, 98, 
            137, 87, 59, 50, 208, 116, 29, 200, 128, 82, 13, 138, 107, 53, 42, 34, 
            123, 203, 65, 174, 111, 101, 19, 78, 165, 62, 115, 108, 175, 139, 126, 107, 
            55, 196, 30, 209, 126, 8, 15, 211, 57, 191, 37, 254, 24, 136, 30, 111, 
            188, 30, 209, 208, 49, 132, 181, 22, 207, 241, 28, 2, 97, 58, 244, 179, 
            190, 120, 249, 174, 99, 6, 215, 232, 173, 1, 20, 216, 224, 191, 247, 78, 
            223, 101, 153, 1, 182, 203, 213, 75, 132, 98, 53, 204, 13, 177, 22, 88, 
            218, 21, 32, 68, 247, 153, 11, 190, 47, 128, 214, 33, 110, 194, 102, 77, 
            5, 178, 74, 65, 134, 62, 91, 190, 133, 15, 134, 94, 37, 247, 205, 51, 
            224, 152, 15, 13, 13, 233, 189, 206, 100, 131, 222, 5, 70, 182, 231, 176, 
            167, 150, 156, 249, 29, 189, 96, 149, 239, 162, 43, 239, 89, 8, 9, 57, 
            118, 227, 168, 243, 164, 188, 125, 8, 8, 240, 36, 45, 21, 20, 44, 175,
        ]; 

        for i in 0..GF2_8::LOG_SIZE {
            assert_eq!(GF2_8::mul(GF2_8::LOG[i], GF2_8::EXP[i]), answers[i]);
        }
    }

    #[test]
    fn div() {
        let answers: [u8; GF2_8::LOG_SIZE] = [
            0, 0, 71, 174, 173, 87, 134, 213, 152, 231, 124, 39, 203, 113, 13, 198, 
            88, 171, 55, 150, 177, 227, 25, 225, 227, 180, 157, 225, 252, 122, 88, 161, 
            45, 87, 148, 78, 40, 165, 74, 134, 142, 120, 121, 163, 156, 75, 154, 241, 
            239, 27, 152, 130, 125, 235, 230, 32, 138, 225, 145, 90, 214, 226, 182, 168, 
            155, 175, 179, 124, 105, 169, 249, 58, 201, 14, 155, 217, 196, 254, 201, 143, 
            229, 12, 178, 24, 100, 226, 163, 234, 177, 36, 75, 106, 114, 208, 162, 63, 
            235, 181, 108, 131, 248, 51, 190, 187, 235, 115, 112, 37, 79, 90, 112, 237, 
            195, 121, 136, 110, 174, 143, 113, 134, 229, 255, 35, 175, 156, 208, 240, 222, 
            94, 202, 228, 34, 123, 23, 48, 18, 122, 114, 75, 243, 212, 139, 56, 132, 
            157, 119, 219, 170, 236, 11, 51, 86, 224, 221, 142, 200, 154, 136, 179, 72, 
            3, 32, 142, 149, 180, 209, 253, 17, 210, 134, 162, 106, 38, 108, 154, 154, 
            74, 181, 115, 142, 204, 195, 23, 162, 178, 41, 9, 90, 190, 14, 2, 45, 
            227, 253, 115, 93, 155, 244, 83, 219, 11, 196, 167, 241, 33, 60, 103, 69, 
            181, 189, 145, 130, 174, 137, 65, 65, 45, 153, 79, 236, 199, 209, 41, 10, 
            205, 44, 182, 38, 222, 209, 253, 247, 64, 71, 32, 1, 27, 53, 4, 110, 
            170, 221, 215, 4, 179, 163, 64, 90, 152, 163, 235, 6, 41, 93, 176, 175,
        ]; 

        for i in 0..GF2_8::LOG_SIZE {
            assert_eq!(GF2_8::div(GF2_8::LOG[i], GF2_8::EXP[i]), answers[i]);
        }
    }

    #[test]
    fn pow() {
        let answers: [u8; GF2_8::LOG_SIZE] = [
            1, 1, 1, 19, 76, 254, 223, 211, 239, 59, 172, 29, 226, 145, 112, 123, 
            73, 185, 89, 185, 89, 134, 15, 101, 106, 169, 182, 237, 62, 168, 64, 7, 
            28, 125, 64, 80, 243, 15, 169, 241, 80, 11, 137, 79, 220, 158, 196, 214, 
            5, 38, 253, 169, 156, 193, 156, 145, 134, 102, 89, 185, 5, 245, 44, 219, 
            255, 150, 53, 199, 146, 146, 227, 108, 230, 147, 127, 38, 59, 89, 169, 44, 
            205, 242, 31, 68, 45, 38, 86, 202, 231, 38, 222, 165, 74, 237, 47, 231, 
            123, 17, 206, 162, 68, 78, 79, 10, 101, 251, 83, 211, 128, 138, 64, 70, 
            139, 46, 50, 113, 146, 205, 31, 179, 69, 27, 13, 233, 53, 146, 1, 10, 
            47, 93, 170, 75, 163, 71, 225, 203, 180, 203, 64, 101, 219, 39, 102, 186, 
            125, 200, 152, 243, 89, 61, 215, 215, 230, 68, 10, 251, 64, 193, 12, 230, 
            172, 19, 170, 196, 138, 226, 7, 139, 107, 123, 132, 48, 10, 45, 103, 1, 
            228, 117, 173, 223, 85, 202, 109, 60, 167, 114, 103, 55, 150, 217, 107, 94, 
            114, 100, 160, 103, 235, 12, 201, 198, 143, 107, 50, 119, 68, 241, 43, 183, 
            26, 64, 36, 240, 130, 113, 59, 218, 44, 185, 219, 2, 216, 182, 219, 179, 
            252, 145, 45, 252, 226, 85, 230, 239, 79, 39, 95, 77, 60, 62, 223, 215, 
            147, 77, 91, 3, 172, 8, 168, 63, 38, 1, 26, 191, 219, 58, 20, 175, 
        ]; 

        for i in 0..GF2_8::LOG_SIZE {
            assert_eq!(GF2_8::pow(GF2_8::LOG[i], GF2_8::EXP[i] as i32), answers[i]);
        }
    }
}
